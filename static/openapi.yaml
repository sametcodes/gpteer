openapi: 3.0.1
info:
  title: PuppeteerGPT
  description: A plugin to drive headless browser. You can use it to search, click, scroll or scrape on the web. You can automate any action just by chatting.
  version: "v1"
servers:
  - url: http://localhost:8008
paths:
  /visit:
    get:
      operationId: visit
      summary: Visit a website
      parameters:
        - in: query
          name: url
          schema:
            type: string
            enum: [back, forward, reload]
          required: true
          description: The url of the website to visit.
      responses:
        "200":
          description: OK
        "404":
          description: Not found
  /click:
    get:
      operationId: click
      summary: Click on a node.
      parameters:
        - in: query
          name: selector
          schema:
            type: string
          required: true
          description: The selector to click on
        - in: query
          name: xpath
          schema:
            type: string
            enum: [true, false]
          default: true
          required: true
          description: Whether the selector is a xpath selector or not. Default is true.
      responses:
        "200":
          description: OK
        "404":
          description: Not found
  /observe:
    get:
      operationId: observe
      summary: Observe page body with XPath selector. Returns if the selector is existing, clickable, or visible.
      parameters:
        - in: query
          name: xpath
          schema:
            type: string
            enum: [true, false]
          default: true
          description: Whether the selector is a xpath selector or not. Default is true.
        - in: query
          name: selector
          schema: 
            type: string
          required: true
      responses:
        "200":
          description: OK
        "404":
          description: Not found
  /type:
    get:
      operationId: type
      summary: Type texts on a input field. Use xpath=false to use CSS selectors.
      parameters:
        - in: query
          name: selector
          schema:
            type: string
          required: true
          description: The selector of the input field.
        - in: query
          name: text
          schema:
            type: string
          required: true
          description: The text to type
        - in: query
          name: xpath
          schema:
            type: string
            enum: [true, false]
          default: true
          required: true
          description: Whether the selector is a xpath selector or not. Default is true.
        - in: query
          name: pressEnter
          schema:
            type: boolean
          required: false
          default: true
          description: Whether to press enter after typing
      responses:
        "200":
          description: OK
        "404":
          description: Not found
  /router:
    get:
      operationId: router
      summary: Handle router
      parameters:
        - in: query
          name: payload
          schema:
            type: string
            enum: [back, forward, reload]
          required: true
          description: The payload to perform on the router
      responses:
        "200":
          description: OK
        "404":
          description: Not found
  /evaluate:
    get:
      operationId: evaluate
      summary: >
        Evaluate a JavaScript expression on the page.
        Example: document.querySelector('h1').textContent
      parameters:
        - in: query
          name: expression
          schema:
            type: string
          required: true
          description: The JavaScript expression to evaluate.
      responses:
        "200":
          description: OK
        "404":
          description: Not found
  /wait:
    get:
      operationId: wait
      summary: Wait for N seconds
      parameters:
        - in: query
          name: time
          schema:
            type: integer
          required: true
          description: Time to wait in seconds
      responses:
        "200":
          description: OK
        "404":
          description: Not found
  /exit:
    get:
      operationId: exit
      summary: Exit the browser
      responses:
        "200":
          description: OK
        "404":
          description: Not found
  /savetask:
    post:
      operationId: savetask
      summary: >
        Saves the latest task to a file as JSON. Only use this if user says "save task" in the prompt.
        {
          "name": "visit_google",
          "tasks": [
            { "action": "visit", "url": "https://www.google.com" },
            { "action": "click", "selector": "input[name='btnK']" }
          ]
        }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the task. Only use alphanumeric characters and underscores (a-zA-Z0-9_).
                tasks:
                  type: array
                  items:
                    type: object
                    properties:
                      action:
                        type: string
                      url:
                        type: string
                        format: uri
                      selector:
                        type: string
                      text:
                        type: string
                  description: The task to save.
      responses:
        "200":
          description: OK
        "404":
          description: Not found
